.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::DRI::Shell 3pm"
.TH Net::DRI::Shell 3pm "2014-10-06" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DRI::Shell \- Command Line Shell for Net::DRI, with batch features and autocompletion support
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 6
\& perl \-I../../ ./Shell.pm
\& or
\& perl \-MNet::DRI::Shell \-e \*(AqNet::DRI::Shell\->run()\*(Aq
\& or in your programs
\& use Net::DRI::Shell;
\& Net::DRI::Shell\->run();
\&
\& Welcome to Net::DRI shell, version 1.07
\& Net::DRI object created with a cache TTL of 10 seconds and logging into files in current directory
\&
\& NetDRI> add_registry registry=EURid clID=YOURLOGIN
\& NetDRI(EURid)> add_current_profile name=profile1 type=epp defer=0 client_login=YOURLOGIN client_password=YOURPASSWORD
\& Profile profile1 added successfully (1000/COMMAND_SUCCESSFUL) SUCCESS
\& NetDRI(EURid,profile1)> domain_info example.eu
\& Command completed successfully (1000/1000) SUCCESS
\& NetDRI(EURid,profile1)> get_info_all
\&
\& ... all data related to the domain name queried ...
\&
\& NetDRI(EURid,profile1)> domain_check whatever.eu
\& Command completed successfully (1000/1000) SUCCESS
\& NetDRI(EURid,profile1)> get_info_all
\&
\& ... all data related to the domain name queried ...
\&
\& NetDRI(EURid,profile1)> show profiles
\& EURid: profile1
\& NetDRI(EURid,profile1)> quit
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a shell to be able to use Net::DRI without writing any code.
.PP
Most of the time commands are the name of methods to use on the Net::DRI object,
with some extra ones and some variations in \s-1API\s0 to make passing parameters simpler.
.SH "AVAILABLE COMMANDS"
.IX Header "AVAILABLE COMMANDS"
After having started this shell, the available commands are the following.
.SS "\s-1SESSION\s0 \s-1COMMANDS\s0"
.IX Subsection "SESSION COMMANDS"
\fIadd_registry registry=REGISTRYNAME clID=YOURLOGIN\fR
.IX Subsection "add_registry registry=REGISTRYNAME clID=YOURLOGIN"
.PP
Replace \s-1REGISTRYNAME\s0 with the Net::DRI::DRD module you want to use, and \s-1YOURLOGIN\s0
with your client login for this registry.
.PP
\fIadd_current_profile name=profile1 type=epp defer=0 client_login=YOURLOGIN client_password=YOURPASSWORD\fR
.IX Subsection "add_current_profile name=profile1 type=epp defer=0 client_login=YOURLOGIN client_password=YOURPASSWORD"
.PP
This will really connect to the registry, replace \s-1YOURLOGIN\s0 by your client login at registry,
and \s-1YOURPASSWORD\s0 by the associated password. You may have to add parameters remote_host= and remote_port=
to connect to other endpoints than the hardcoded default which is most of the time the registry \s-1OT&E\s0 server,
and not the production one !
.PP
\fIadd registry=REGISTRYNAME clID=YOURLOGIN name=profile1 type=epp defer=0 client_login=YOURLOGIN client_password=YOURPASSWORD\fR
.IX Subsection "add registry=REGISTRYNAME clID=YOURLOGIN name=profile1 type=epp defer=0 client_login=YOURLOGIN client_password=YOURPASSWORD"
.PP
This is a shortcut, doing the equivalent of add_registry, and then add_current_profile.
.PP
\fIget_info_all\fR
.IX Subsection "get_info_all"
.PP
After each call to the registry, like domain_info or domain_check, this will list all available data
retrieved from registry. Things are pretty-printed as much as possible. You should call get_info_all
right after your domain_something call otherwise if you do another operation previous information
is lost. This is done automatically for you on the relevant commands, but you can also use it
manually at any time.
.PP
\fIshow profiles\fR
.IX Subsection "show profiles"
.PP
Show the list of registries and associated profiles currently in use (opened in this shell with
add_registry + add_current_profile, or add).
.PP
\fIshow tlds\fR
.IX Subsection "show tlds"
.PP
Show the list of TLDs handled by the currently selected registry.
.PP
\fIshow periods\fR
.IX Subsection "show periods"
.PP
Show the list of allowed periods (domain name durations) for the currently selected registry.
.PP
\fIshow objects\fR
.IX Subsection "show objects"
.PP
Show the list of managed objects types at the currently selected registry.
.PP
\fIshow types\fR
.IX Subsection "show types"
.PP
Show the list of profile types at the currently selected registry
.PP
\fIshow status\fR
.IX Subsection "show status"
.PP
Show the list of available status for the currently selected registry, to use
as status name in some commands below (domain_update_status_* domain_update 
host_update_status_* host_update contact_update_status_* contact_update).
.PP
\fIshow config\fR
.IX Subsection "show config"
.PP
This will show all current config options. See \f(CW\*(C`set\*(C'\fR command below for the list of config options.
.PP
\fIset OPTION=VALUE\fR
.IX Subsection "set OPTION=VALUE"
.PP
The set command can be used to change some options inside the shell.
.PP
The current list of available options is:
.PP
verbose
.IX Subsection "verbose"
.PP
Set this option to 1 if you want a dump of all data retrieved from registry automatically after each operation, including failed ones, and including
all displaying raw data exchanged with registry.
.PP
\fItarget \s-1REGISTRYNAME\s0 \s-1PROFILENAME\s0\fR
.IX Subsection "target REGISTRYNAME PROFILENAME"
.PP
Switch to registry \s-1REGISTRYNAME\s0 (from currently available registries) and profile \s-1PROFILENAME\s0 (from currently available
profiles in registry \s-1REGISTRYNAME\s0).
.PP
\fIrun \s-1FILENAME\s0\fR
.IX Subsection "run FILENAME"
.PP
Will open the local \s-1FILENAME\s0 and read in it commands and execute all of them; you can also
start your shell with a filename as argument and its commands will be run at beginning of
session before giving the control back. They will be displayed (username and password will be
masked) with their results.
.PP
\fIrecord \s-1FILENAME\s0\fR
.IX Subsection "record FILENAME"
.PP
If called with a filename argument, all subsequent commands, and their results will be printed in the filename given.
If called without argument, it stops a current recording session.
.PP
\fI!cmd\fR
.IX Subsection "!cmd"
.PP
All command line starting with a bang (!) will be treated as local commands to run through the local underlying \s-1OS\s0 shell.
.PP
Example: !ls \-l
will display the content of the current directory.
.PP
\fIhelp\fR
.IX Subsection "help"
.PP
Returns a succinct list of available commands.
.PP
\fIquit\fR
.IX Subsection "quit"
.PP
Leave the shell.
.SS "\s-1DOMAIN\s0 \s-1COMMANDS\s0"
.IX Subsection "DOMAIN COMMANDS"
\fIdomain_create \s-1DOMAIN\s0 [duration=X] [ns=HOSTNAMEA \s-1IPA1\s0 \s-1IPA2\s0 ... \s-1HOSTNAMEB\s0 \s-1IPB1\s0 \s-1IPB2\s0 ...] [admin=SRID1] [registrant=SRID2] [billing=SRID3] [tech=SRID4] [auth=X]\fR
.IX Subsection "domain_create DOMAIN [duration=X] [ns=HOSTNAMEA IPA1 IPA2 ... HOSTNAMEB IPB1 IPB2 ...] [admin=SRID1] [registrant=SRID2] [billing=SRID3] [tech=SRID4] [auth=X]"
.PP
Create the given domain name. See above for the duration format to use. Admin, registrant, billing and tech
contact ids are mandatory or optional depending on the registry. They may be repeated (except registrant)
for registries allowing multiple contacts per role.
.PP
\fIdomain_info \s-1DOMAIN\s0\fR
.IX Subsection "domain_info DOMAIN"
.PP
Do a domain_info call to the registry for the domain \s-1YOURDOMAIN\s0 ; most of the the registries
prohibit getting information on domain names you do not sponsor.
.PP
\fIdomain_check \s-1DOMAIN\s0\fR
.IX Subsection "domain_check DOMAIN"
.PP
Do a domain_check call to the registry for the domain \s-1ANYDOMAIN\s0 ; you can check any domain,
existing or not, if you are the sponsoring registrar or not.
.PP
\fIdomain_exist \s-1DOMAIN\s0\fR
.IX Subsection "domain_exist DOMAIN"
.PP
A kind of simpler domain_check, just reply by \s-1YES\s0 or \s-1NO\s0 for the given domain name.
.PP
\fIdomain_transfer_start \s-1DOMAIN\s0 auth=AUTHCODE [duration=PERIOD]\fR
.IX Subsection "domain_transfer_start DOMAIN auth=AUTHCODE [duration=PERIOD]"
.PP
\fIdomain_transfer_stop \s-1DOMAIN\s0 [auth=AUTHCODE]\fR
.IX Subsection "domain_transfer_stop DOMAIN [auth=AUTHCODE]"
.PP
\fIdomain_transfer_query \s-1DOMAIN\s0 [auth=AUTHCODE]\fR
.IX Subsection "domain_transfer_query DOMAIN [auth=AUTHCODE]"
.PP
\fIdomain_transfer_accept \s-1DOMAIN\s0 [auth=AUTHCODE]\fR
.IX Subsection "domain_transfer_accept DOMAIN [auth=AUTHCODE]"
.PP
\fIdomain_transfer_refuse \s-1DOMAIN\s0 [auth=AUTHCODE]\fR
.IX Subsection "domain_transfer_refuse DOMAIN [auth=AUTHCODE]"
.PP
Start, or stop an incoming transfer, query status of a current running transfer, accept or refuse an outgoing domain name transfer.
.PP
The \s-1AUTHCODE\s0 is mandatory or optional, depending on the registry.
.PP
The duration is optional and can be specified (the allowed values depend on the registry) as Ayears or Bmonths
where A and B are integers for the number of years or months (this can be abbreviated as Ay or Bm).
.PP
\fIdomain_update_ns_set \s-1DOMAIN\s0 \s-1HOSTNAMEA\s0 \s-1IPA1\s0 \s-1IPA2\s0 ... \s-1HOSTNAMEB\s0 \s-1IPB1\s0 \s-1IPB2\s0 ...\fR
.IX Subsection "domain_update_ns_set DOMAIN HOSTNAMEA IPA1 IPA2 ... HOSTNAMEB IPB1 IPB2 ..."
.PP
\fIdomain_update_ns_add \s-1DOMAIN\s0 \s-1HOSTNAMEA\s0 \s-1IPA1\s0 \s-1IPA2\s0 ... \s-1HOSTNAMEB\s0 \s-1IPB1\s0 \s-1IPB2\s0 ...\fR
.IX Subsection "domain_update_ns_add DOMAIN HOSTNAMEA IPA1 IPA2 ... HOSTNAMEB IPB1 IPB2 ..."
.PP
\fIdomain_update_ns_del \s-1DOMAIN\s0 \s-1HOSTNAMEA\s0 \s-1IPA1\s0 \s-1IPA2\s0 ... \s-1HOSTNAMEB\s0 \s-1IPB1\s0 \s-1IPB2\s0 ...\fR
.IX Subsection "domain_update_ns_del DOMAIN HOSTNAMEA IPA1 IPA2 ... HOSTNAMEB IPB1 IPB2 ..."
.PP
Set the current list of nameservers associated to this \s-1DOMAIN\s0, add to the current list or delete from the current list.
.PP
\fIdomain_update_status_set \s-1DOMAIN\s0 \s-1STATUS1\s0 \s-1STATUS2\s0 ...\fR
.IX Subsection "domain_update_status_set DOMAIN STATUS1 STATUS2 ..."
.PP
\fIdomain_update_status_add \s-1DOMAIN\s0 \s-1STATUS1\s0 \s-1STATUS2\s0 ...\fR
.IX Subsection "domain_update_status_add DOMAIN STATUS1 STATUS2 ..."
.PP
\fIdomain_update_status_del \s-1DOMAIN\s0 \s-1STATUS1\s0 \s-1STATUS2\s0 ...\fR
.IX Subsection "domain_update_status_del DOMAIN STATUS1 STATUS2 ..."
.PP
Set the current list of status associated to this \s-1DOMAIN\s0, add to the current
list or delete from the current list. First parameter is the domain name, then status names,
as needed.
.PP
The status names are those in the list given back by the show status command (see above).
.PP
\fIdomain_update_contact_set \s-1DOMAIN\s0 \s-1SRVID1\s0 \s-1SRVID2\s0 ...\fR
.IX Subsection "domain_update_contact_set DOMAIN SRVID1 SRVID2 ..."
.PP
\fIdomain_update_contact_add \s-1DOMAIN\s0 \s-1SRVID2\s0 \s-1SRVID2\s0 ...\fR
.IX Subsection "domain_update_contact_add DOMAIN SRVID2 SRVID2 ..."
.PP
\fIdomain_update_contact_del \s-1DOMAIN\s0 \s-1SRVID1\s0 \s-1SRVID2\s0 ...\fR
.IX Subsection "domain_update_contact_del DOMAIN SRVID1 SRVID2 ..."
.PP
Set the current list of contacts associated to this \s-1DOMAIN\s0, add to the current list or delete from the current list
by providing the contact server ids.
.PP
\fIdomain_update \s-1DOMAIN\s0 +status=S1 \-status=S2 +admin=C1 \-tech=C2 \-billing=C3 registrant=C4 auth=A +ns=... \-ns=...\fR
.IX Subsection "domain_update DOMAIN +status=S1 -status=S2 +admin=C1 -tech=C2 -billing=C3 registrant=C4 auth=A +ns=... -ns=..."
.PP
Combination of the previous methods, plus ability to change authInfo and other parameters depending on registry.
.PP
\fIdomain_renew \s-1DOMAIN\s0 [duration=X] [current_expiration=YYYY\-MM\-DD]\fR
.IX Subsection "domain_renew DOMAIN [duration=X] [current_expiration=YYYY-MM-DD]"
.PP
Renew the given domain name. Duration and current expiration are optional. See above for the duration format to use.
.PP
\fIdomain_delete \s-1DOMAIN\s0\fR
.IX Subsection "domain_delete DOMAIN"
.PP
Delete the given domain name.
.SS "\s-1HOST\s0 \s-1COMMANDS\s0"
.IX Subsection "HOST COMMANDS"
For registries handling nameservers as separate objects.
.PP
\fIhost_create \s-1HOSTNAME\s0 \s-1IP1\s0 \s-1IP2\s0 ...\fR
.IX Subsection "host_create HOSTNAME IP1 IP2 ..."
.PP
Create the host named \s-1HOSTNAME\s0 at the registry with the list of \s-1IP\s0 (IPv4 and IPv6
depending on registry support) given.
.PP
\fIhost_delete \s-1HOSTNAME\s0\fR
.IX Subsection "host_delete HOSTNAME"
.PP
\fIhost_info \s-1HOSTNAME\s0\fR
.IX Subsection "host_info HOSTNAME"
.PP
\fIhost_check \s-1HOSTNAME\s0\fR
.IX Subsection "host_check HOSTNAME"
.PP
Various operations on host objects.
.PP
\fIhost_update_ip_set \s-1HOSTNAME\s0 \s-1IP1\s0 \s-1IP2\s0 ...\fR
.IX Subsection "host_update_ip_set HOSTNAME IP1 IP2 ..."
.PP
\fIhost_update_ip_add \s-1HOSTNAME\s0 \s-1IP1\s0 \s-1IP2\s0 ...\fR
.IX Subsection "host_update_ip_add HOSTNAME IP1 IP2 ..."
.PP
\fIhost_update_ip_del \s-1HOSTNAME\s0 \s-1IP1\s0 \s-1IP2\s0 ...\fR
.IX Subsection "host_update_ip_del HOSTNAME IP1 IP2 ..."
.PP
Set the current list of \s-1IP\s0 addresses associated to this \s-1HOSTNAME\s0, add to the current
list or delete from the current list. First parameter is the nameserver hostname, then \s-1IP\s0 addresses,
as needed.
.PP
\fIhost_update_status_set \s-1HOSTNAME\s0 \s-1STATUS1\s0 \s-1STATUS2\s0 ...\fR
.IX Subsection "host_update_status_set HOSTNAME STATUS1 STATUS2 ..."
.PP
\fIhost_update_status_add \s-1HOSTNAME\s0 \s-1STATUS1\s0 \s-1STATUS2\s0 ...\fR
.IX Subsection "host_update_status_add HOSTNAME STATUS1 STATUS2 ..."
.PP
\fIhost_update_status_del \s-1HOSTNAME\s0 \s-1STATUS1\s0 \s-1STATUS2\s0 ...\fR
.IX Subsection "host_update_status_del HOSTNAME STATUS1 STATUS2 ..."
.PP
Set the current list of status associated to this \s-1HOSTNAME\s0, add to the current
list or delete from the current list. First parameter is the nameserver hostname, then status names,
as needed.
.PP
The status names are those in the list given back by the show status command (see above).
.PP
\fIhost_update \s-1HOSTNAME\s0 +ip=IP1 +ip=IP2 \-ip=IP3 +status=STATUS1 \-status=STATUS2 name=NEWNAME\fR
.IX Subsection "host_update HOSTNAME +ip=IP1 +ip=IP2 -ip=IP3 +status=STATUS1 -status=STATUS2 name=NEWNAME"
.PP
Combines the previous operations.
.PP
\fIhost_update_name_set \s-1HOSTNAME\s0 \s-1NEWNAME\s0\fR
.IX Subsection "host_update_name_set HOSTNAME NEWNAME"
.PP
Change the current name of host objects from \s-1HOSTNAME\s0 to \s-1NEWNAME\s0.
.SS "\s-1CONTACT\s0 \s-1COMMANDS\s0"
.IX Subsection "CONTACT COMMANDS"
For registries handling contacts as separate objects.
.PP
\fIcontact_create name=X org=Y street=Z1 street=Z2 email=A voice=B ...\fR
.IX Subsection "contact_create name=X org=Y street=Z1 street=Z2 email=A voice=B ..."
.PP
Create a new contact object.
.PP
The list of mandatory attributes depend on the registry. Some attributes (like street) may appear multiple times.
.PP
Some registry allow setting an \s-1ID\s0 (using srid=yourchoice), others create the \s-1ID\s0, in which case you need
to do a get_info_all after contact_create to retrieve the given server \s-1ID\s0.
.PP
\fIcontact_delete \s-1SRID\s0\fR
.IX Subsection "contact_delete SRID"
.PP
\fIcontact_info \s-1SRID\s0\fR
.IX Subsection "contact_info SRID"
.PP
\fIcontact_check \s-1SRID\s0\fR
.IX Subsection "contact_check SRID"
.PP
Various operations on contacts.
.PP
\fIcontact_update_status_set \s-1SRID\s0 \s-1STATUS1\s0 \s-1STATUS2\s0 ...\fR
.IX Subsection "contact_update_status_set SRID STATUS1 STATUS2 ..."
.PP
\fIcontact_update_status_add \s-1SRID\s0 \s-1STATUS1\s0 \s-1STATUS2\s0 ...\fR
.IX Subsection "contact_update_status_add SRID STATUS1 STATUS2 ..."
.PP
\fIcontact_update_status_del \s-1SRID\s0 \s-1STATUS1\s0 \s-1STATUS2\s0 ...\fR
.IX Subsection "contact_update_status_del SRID STATUS1 STATUS2 ..."
.PP
Set the current list of status associated to this contact \s-1SRID\s0, add to the current
list or delete from the current list. First parameter is the contact server \s-1ID\s0, then status names,
as needed.
.PP
The status names are those in the list given back by the show status command (see above).
.PP
\fIcontact_update \s-1SRID\s0 name=X org=Y ... +status=... \-status=...\fR
.IX Subsection "contact_update SRID name=X org=Y ... +status=... -status=..."
.PP
Change some contacts attributes, as well as statuses.
.PP
\fIcontact_transfer_start \s-1SRID\s0\fR
.IX Subsection "contact_transfer_start SRID"
.PP
\fIcontact_transfer_stop \s-1SRID\s0\fR
.IX Subsection "contact_transfer_stop SRID"
.PP
\fIcontact_transfer_query \s-1SRID\s0\fR
.IX Subsection "contact_transfer_query SRID"
.PP
\fIcontact_transfer_accept \s-1SRID\s0\fR
.IX Subsection "contact_transfer_accept SRID"
.PP
\fIcontact_transfer_refuse \s-1SRID\s0\fR
.IX Subsection "contact_transfer_refuse SRID"
.PP
Start, or stop an incoming transfer, query status of a current running transfer, accept or refuse an outgoing contact transfer.
.SS "\s-1MESSAGE\s0 \s-1COMMANDS\s0"
.IX Subsection "MESSAGE COMMANDS"
For registries handling messages, like \s-1EPP\s0 poll features.
.PP
\fImessage_retrieve [\s-1ID\s0]\fR
.IX Subsection "message_retrieve [ID]"
.PP
Retrieve a message waiting at registry.
.PP
\fImessage_delete [\s-1ID\s0]\fR
.IX Subsection "message_delete [ID]"
.PP
Delete a message waiting at registry.
.PP
\fImessage_waiting\fR
.IX Subsection "message_waiting"
.PP
Notifies if messages are waiting at registry.
.PP
\fImessage_count\fR
.IX Subsection "message_count"
.PP
Get the numbers of messages waiting at the registry.
.SH "COMPLETION"
.IX Header "COMPLETION"
If Term::Readline::Gnu or Term::Readline::Perl are installed, it will be automatically used by this shell 
to provide standard shell autocompletion for commands and parameters.
.PP
All commands described above will be available through autocompletion. As you use them,
all parameters (domain names, contacts, hostnames, local files) will also be stored
and provided to later autocompletion calls (with the [\s-1TAB\s0] key).
.PP
It will also autocomplete registry= and type= parameters during add/add_registry, from
a basic default set of values: registry= values are taken from a basic Net::DRI install
without taking into account any private \s-1DRD\s0 module, and type= values are a default set,
not checked against registry= value.
Same for target calls, where registry and/or profile name will be autocompleted as possible.
.PP
It will even autocomplete \s-1TLD\s0 on domain names for your current registry after your typed
the first label and a dot (and eventually some other characters), during any domain name operation.
Same for durations and status values.
.PP
Contacts and nameservers will also be autocompleted when used in any domain_* operation.
.PP
Contacts attributes will be autocompleted during contact_create based on the current registry & profile.
.PP
Information retrieved with domain_info calls will also be used in later autocompletion tries,
regarding contact ids and hostnames. During a contact creation, the registry returned contact id
is also added for later autocompletion tries.
.PP
For autocompletion, contacts are specific to each registry. Hostnames are common to all registries,
as are domain names, but domain names are checked against the available TLDs of the current registry when used 
for autocompletion.
.SH "LOGGING"
.IX Header "LOGGING"
By default, all operations will have some logging information done in files stored in
the working directory. There will be a core.log file for all operations and then one
file per tuple (registry,profile).
.SH "BATCH OPERATIONS"
.IX Header "BATCH OPERATIONS"
Batch operations are available for some domain name commands: domain_create,
domain_delete, domain_renew, domain_check, domain_info, domain_transfer and
all domain_update commands. It can be used on a list of domain names for which
all other parameters needed by the command are the same.
.PP
To do that, just use the command normally as outlined above, but instead of the
domain name, put a file path, with at least one / (so for a file \*(L"batch.txt\*(R" in the
current directory, use \*(L"./batch.txt\*(R").
.PP
If you use backticks such as `command` for the domain name, the command will 
be started locally and its output will be used just like a file.
.PP
The shell will then apply the command and its parameters on the domain names
listed in the specified file: you should have one domain name per line, blank
lines and lines starting with # are ignored.
.PP
At the same place a new file is created with a name derived from the given name
in which the result of each domain name command will be written. If \*(L"input\*(R" is 
the filename used, the results will be written to \*(L"input.PID.TIME.results\*(R"
where \s-1PID\s0 is the program id of the running shell for these commands and \s-1TIME\s0 the
Unix epoch when the batch started.
.PP
As output the shell will give a summary of the number of operations done
for each possible outcome (success or error), as well as time statistics.
.SH "SUPPORT"
.IX Header "SUPPORT"
For now, support questions should be sent to:
.PP
<netdri@dotandco.com>
.PP
Please also see the \s-1SUPPORT\s0 file in the distribution.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://www.dotandco.com/services/software/Net\-DRI/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Patrick Mevzek, <netdri@dotandco.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2008\-2010 Patrick Mevzek <netdri@dotandco.com>.
All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.PP
See the \s-1LICENSE\s0 file that comes with this distribution for more details.
